// <auto-generated />
using System;
using Blockex.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Blockex.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201229033715_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Blockchain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("bodyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("bodyId");

                    b.ToTable("BtcUcBlockchains");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Op")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("xId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("xId");

                    b.ToTable("BtcUcBlockchainBodies");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainInput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BtcUcBlockchainXId")
                        .HasColumnType("int");

                    b.Property<int?>("prev_outId")
                        .HasColumnType("int");

                    b.Property<long>("sequence")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BtcUcBlockchainXId");

                    b.HasIndex("prev_outId");

                    b.ToTable("BtcUcBlockchainInputs");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BtcUcBlockchainXId")
                        .HasColumnType("int");

                    b.Property<string>("addr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("n")
                        .HasColumnType("int");

                    b.Property<string>("script")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("spent")
                        .HasColumnType("bit");

                    b.Property<int>("tx_index")
                        .HasColumnType("int");

                    b.Property<long>("value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BtcUcBlockchainXId");

                    b.ToTable("BtcUcBlockchainOuts");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainX", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("lock_time")
                        .HasColumnType("int");

                    b.Property<string>("relayed_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("size")
                        .HasColumnType("int");

                    b.Property<long>("time")
                        .HasColumnType("bigint");

                    b.Property<int>("tx_index")
                        .HasColumnType("int");

                    b.Property<int>("ver")
                        .HasColumnType("int");

                    b.Property<int>("vin_sz")
                        .HasColumnType("int");

                    b.Property<int>("vout_size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BtcUcBlockchainXs");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Blockchain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("bodyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("bodyId");

                    b.ToTable("BtcUcBlockcyphers");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Op")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("created_at")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("xId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("xId");

                    b.ToTable("BtcUcBlockcypherBodies");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherInput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BtcUcBlockcypherXId")
                        .HasColumnType("int");

                    b.Property<int?>("prev_outId")
                        .HasColumnType("int");

                    b.Property<long>("sequence")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BtcUcBlockcypherXId");

                    b.HasIndex("prev_outId");

                    b.ToTable("BtcUcBlockcypherInputs");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BtcUcBlockcypherXId")
                        .HasColumnType("int");

                    b.Property<string>("addr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("n")
                        .HasColumnType("int");

                    b.Property<string>("script")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("spent")
                        .HasColumnType("bit");

                    b.Property<int>("tx_index")
                        .HasColumnType("int");

                    b.Property<long>("value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BtcUcBlockcypherXId");

                    b.ToTable("BtcUcBlockcypherOuts");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherX", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("lock_time")
                        .HasColumnType("int");

                    b.Property<string>("relayed_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("size")
                        .HasColumnType("int");

                    b.Property<long>("time")
                        .HasColumnType("bigint");

                    b.Property<int>("tx_index")
                        .HasColumnType("int");

                    b.Property<int>("ver")
                        .HasColumnType("int");

                    b.Property<int>("vin_sz")
                        .HasColumnType("int");

                    b.Property<int>("vout_size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BtcUcBlockcypherXs");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Eth.EthBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("Difficulty")
                        .HasColumnType("bigint");

                    b.Property<string>("ExtraData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GasLimitId")
                        .HasColumnType("int");

                    b.Property<int?>("GasUsedId")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nonce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.Property<string>("ParentHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GasLimitId");

                    b.HasIndex("GasUsedId");

                    b.ToTable("EthBlocks");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Eth.EthTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BlockHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChainId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Confirmations")
                        .HasColumnType("int");

                    b.Property<int?>("EthBlockId")
                        .HasColumnType("int");

                    b.Property<int?>("GasLimitId")
                        .HasColumnType("int");

                    b.Property<int?>("GasPriceId")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nonce")
                        .HasColumnType("int");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionIndex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValueId")
                        .HasColumnType("int");

                    b.Property<string>("creates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("r")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("s")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("v")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EthBlockId");

                    b.HasIndex("GasLimitId");

                    b.HasIndex("GasPriceId");

                    b.HasIndex("ValueId");

                    b.ToTable("EthTransactions");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Eth.HexNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("_hex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("_isBigNumber")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("HexNumbers");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Eth.SourceHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Blockchain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BodyId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.ToTable("SourceHeaders");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchain", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainBody", "body")
                        .WithMany()
                        .HasForeignKey("bodyId");

                    b.Navigation("body");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainBody", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainX", "x")
                        .WithMany()
                        .HasForeignKey("xId");

                    b.Navigation("x");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainInput", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainX", null)
                        .WithMany("inputs")
                        .HasForeignKey("BtcUcBlockchainXId");

                    b.HasOne("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainOut", "prev_out")
                        .WithMany()
                        .HasForeignKey("prev_outId");

                    b.Navigation("prev_out");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainOut", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainX", null)
                        .WithMany("Out")
                        .HasForeignKey("BtcUcBlockchainXId");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypher", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherBody", "body")
                        .WithMany()
                        .HasForeignKey("bodyId");

                    b.Navigation("body");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherBody", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherX", "x")
                        .WithMany()
                        .HasForeignKey("xId");

                    b.Navigation("x");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherInput", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherX", null)
                        .WithMany("inputs")
                        .HasForeignKey("BtcUcBlockcypherXId");

                    b.HasOne("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherOut", "prev_out")
                        .WithMany()
                        .HasForeignKey("prev_outId");

                    b.Navigation("prev_out");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherOut", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherX", null)
                        .WithMany("Out")
                        .HasForeignKey("BtcUcBlockcypherXId");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Eth.EthBlock", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Eth.HexNumber", "GasLimit")
                        .WithMany()
                        .HasForeignKey("GasLimitId");

                    b.HasOne("Blockex.ExtractionModels.Eth.HexNumber", "GasUsed")
                        .WithMany()
                        .HasForeignKey("GasUsedId");

                    b.Navigation("GasLimit");

                    b.Navigation("GasUsed");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Eth.EthTransaction", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Eth.EthBlock", null)
                        .WithMany("Transactions")
                        .HasForeignKey("EthBlockId");

                    b.HasOne("Blockex.ExtractionModels.Eth.HexNumber", "GasLimit")
                        .WithMany()
                        .HasForeignKey("GasLimitId");

                    b.HasOne("Blockex.ExtractionModels.Eth.HexNumber", "GasPrice")
                        .WithMany()
                        .HasForeignKey("GasPriceId");

                    b.HasOne("Blockex.ExtractionModels.Eth.HexNumber", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");

                    b.Navigation("GasLimit");

                    b.Navigation("GasPrice");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Eth.SourceHeader", b =>
                {
                    b.HasOne("Blockex.ExtractionModels.Eth.EthBlock", "Body")
                        .WithMany()
                        .HasForeignKey("BodyId");

                    b.Navigation("Body");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockchain.BtcUcBlockchainX", b =>
                {
                    b.Navigation("inputs");

                    b.Navigation("Out");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Btc.UnconfirmedTxs.Blockcypher.BtcUcBlockcypherX", b =>
                {
                    b.Navigation("inputs");

                    b.Navigation("Out");
                });

            modelBuilder.Entity("Blockex.ExtractionModels.Eth.EthBlock", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
